package org.acme.repository;


import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.acme.model.DTO.UsuarioDTO;
import org.acme.model.Usuario;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;


@ApplicationScoped
public class UsuarioRepository {


    /*CREATE TABLE T_RHSTU_PACIENTE (
    id_paciente NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nm_paciente VARCHAR(90),
    nr_cpf VARCHAR(14),
    nr_telefone_paciente VARCHAR(20),
    ds_email_paciente VARCHAR(100),
    ds_senha_paciente VARCHAR(60)
);
    */

    @Inject
    DataSource dataSource;

    public void inserirPaciente(UsuarioDTO usuario) throws SQLException {
        String sqlI = "INSERT INTO T_RHSTU_PACIENTE (nm_paciente, nr_cpf, nr_telefone_paciente, ds_email_paciente, ds_senha_paciente) VALUES (?,?,?,?,?)";
            try (Connection con = dataSource.getConnection();
                 PreparedStatement ps = con.prepareStatement(sqlI);
            ) {
                ps.setString(1, usuario.getNome_usuario());
                ps.setString(2, usuario.getCpf());
                ps.setString(3, usuario.getTelefone());
                ps.setString(4, usuario.getEmail_usuario());
                ps.setString(5, usuario.getSenha_usuario());
                ps.executeUpdate();

            }
        }

        public List<Usuario> RelatorioPaciente(int id_paciente, String email_u, String senha_u) {
            String sql = "select * from T_RHSTU_PACIENTE WHERE id_paciente=? AND ds_email_paciente=? AND ds_senha_paciente=?";

            try (Connection con = dataSource.getConnection();
                 PreparedStatement ps = con.prepareStatement(sql)) {

                ps.setInt(1,id_paciente);
                ps.setString(2,email_u);
                ps.setString(3,senha_u);

                List<Usuario> l = new ArrayList<>();
                try(ResultSet rs = ps.executeQuery();) {
                    while (rs.next()) {
                        Usuario usuario = new Usuario();
                        usuario.setId_usuario(rs.getInt(1));
                        usuario.setNome_usuario(rs.getString(2));
                        usuario.setCpf(rs.getString(3));
                        usuario.setTelefone(rs.getString(4));
                        usuario.setEmail_usuario(rs.getString(5));
                        usuario.setSenha_usuario(rs.getString(6));

                        l.add(usuario);
                    }
                    return l;
                }
                }catch (SQLException e) {
                    throw new RuntimeException(e);
            }

    }
    public List<Usuario> lista() throws SQLException{
        String sql="SELECT * FROM T_RHSTU_PACIENTE ORDER BY id_paciente";
        try(Connection con= dataSource.getConnection();
            PreparedStatement ps= con.prepareStatement(sql)) {

            List<Usuario>listaUsuario= new ArrayList<>();
            try(ResultSet rs=ps.executeQuery()){
                while (rs.next()){
                    Usuario u= new Usuario();
                    u.setId_usuario(rs.getInt(1));
                    u.setNome_usuario(rs.getString(2));
                    u.setCpf(rs.getString(3));
                    u.setTelefone(rs.getString(4));
                    u.setEmail_usuario(rs.getString(5));
                    u.setSenha_usuario(rs.getString(6));

                    listaUsuario.add(u);
                }
            }
            return listaUsuario;
        }
    }


        public void RemoverPaciente(int id,String email_u, String senha_u) {
        String sql = "DELETE FROM T_RHSTU_PACIENTE WHERE id_paciente=? AND ds_email_paciente=? AND ds_senha_paciente=?";
                try (Connection con = dataSource.getConnection();
                     PreparedStatement ps = con.prepareStatement(sql)) {
                    ps.setInt(1,id);
                    ps.setString(2,email_u);
                    ps.setString(3,senha_u);

                    ps.executeUpdate();
                }catch (SQLException e) {
                    throw new RuntimeException("Erro de remover");
                }
            }


        public void updanteUsuario(int id, String nome,String cpf, String telefone, String email, String senha){
            String sql="UPDATE T_RHSTU_PACIENTE SET nm_paciente= ?, nr_cpf= ?, nr_telefone_paciente= ?, ds_email_paciente= ?, ds_senha_paciente= ? WHERE id_paciente= ?";
            try(Connection con= dataSource.getConnection();
                PreparedStatement ps= con.prepareStatement(sql))
            {

                ps.setString(1,nome);
                ps.setString(2,cpf);
                ps.setString(3, telefone);
                ps.setString(4, email);
                ps.setString(5,senha);
                ps.setInt(6, id);

                ps.executeUpdate();
                int alteradas=ps.executeUpdate();
                if (alteradas==0){
                    throw new IllegalArgumentException("NÃ£o existe nenhum id dentro da tabela");
                }

            }catch (SQLException e){
                throw new RuntimeException("Erro de executar updante.");
            }
        }
}
